require Manipulation;

// this is here for backward compatibility to 1.15.2
/// \dfgPresetOmit
interface RTValToJSONEncoder {
  String convertToString!();
};
/// \dfgPresetOmit
interface RTValFromJSONDecoder {
  Boolean convertFromString!(String data);
};


object StandAloneWeightmap : Persistable, RTValToJSONEncoder, RTValFromJSONDecoder {
  Weightmap weightmap;
  Scalar weightmap_persistData[];
  Color weightmapColor;
  Scalar brushSize;
};

function StandAloneWeightmap() {
  this.brushSize = -1.0f;
}

/// \dfgPresetDefault attributeName "weightmap"
function StandAloneWeightmap.weightmapInit!(io PolygonMesh sourceMesh, Xfo sourceMeshXfo, String attributeName) {
  if (!sourceMesh)
    return;
  if (!attributeName) {
    report ("[StandAloneWeightMap]: A name is required.");
    return;
  }
  if (this.weightmap != null && this.weightmap.paintManipulator != null)
    this.brushSize = this.weightmap.paintManipulator.brushSize;

  this.weightmap = Weightmap();
  this.weightmap.setName(attributeName);
  this.weightmap.connect(sourceMesh, sourceMeshXfo);

  Size pDataSize = this.weightmap_persistData.size();
  Size attrSize = this.weightmap.weightMapAttr.values.size();
  Size pointCount = sourceMesh.pointCount();

  if (pDataSize > 0) {
    if (pDataSize == attrSize) {
      this.weightmap.weightMapAttr.values = this.weightmap_persistData;
    } else {
      Ref<ScalarAttribute> attr = this.weightmap.weightMapAttr;
      for (Size i = 0; i < pointCount && i < attrSize && i < pDataSize; i++) {
        sourceMesh.setPointAttribute(i, attr, this.weightmap_persistData[i]);
      }
    }
  }
  this.weightmap_persistData = this.weightmap.weightMapAttr.values;
}



/*
    Weight map setters
*/
/// \dfgPresetDefault paintAndDisplay true
/// \dfgPresetDefault brushStrength 0.25
/// \dfgPresetDefault color {'r':0.89'g':0.25'b':0.25'a':0.0}
function StandAloneWeightmap.setWeightmapSettings!(Boolean paintAndDisplay, Boolean display, Scalar brushStrength, Color color) {
  Boolean color_changed = (this.weightmapColor != color);
  if (color_changed) {
    this.weightmap.display(false);
    this.weightmapColor = color;
  }
  this.weightmap.setColor(this.weightmapColor);

  Boolean display_weights = display || paintAndDisplay;
  this.weightmap.display(display_weights);
  if (paintAndDisplay) {
    if (this.weightmap.paintManipulator  == null) {
      this.weightmap.activateManipulator();
      if (this.brushSize > 0.02f)
        this.weightmap.paintManipulator.brushSize = this.brushSize;
    } else {
      this.brushSize = this.weightmap.paintManipulator.brushSize;
      this.weightmap.activateManipulator();
    }

    if (this.weightmap.paintManipulator) {
      this.weightmap.paintManipulator.brushStrength = brushStrength;
    }
  }
}


/*
    Persistence Data
*/
/// \internal
function StandAloneWeightmap.persistence_prepareData?(io JSONDoc doc, String namespace) {
  String wmap_data_name = (namespace + "_weightmap_values");
  if (this.weightmap_persistData.size() > 0) {
    // means the previous iteration of the array has not been copied
    JSONArrayValue jArray();
    for (UInt32 i = 0; i < this.weightmap_persistData.size(); i++) {
      jArray.addScalar( this.weightmap_persistData[i] );
    }
    doc.root.set((namespace + "_weightmap_values"), jArray);
  }
}

/// \internal
function StandAloneWeightmap.persistence_restoreData!(io JSONDoc doc, String namespace) {
  String wmap_data_name = (namespace + "_weightmap_values");
  if(doc.root.has(wmap_data_name)){
    JSONArrayValue jArray = doc.root.get(wmap_data_name);
    this.weightmap_persistData.resize(jArray.size());
    for (UInt32 i = 0; i < jArray.size(); i++) {
      this.weightmap_persistData[i] = jArray.getScalar(i);
    }
  }  
}

/*
    Persistence Proper
*/
/// \internal
function String StandAloneWeightmap.saveDataToString?(PersistenceContext context) {
  JSONDoc doc();
  this.persistence_prepareData(doc, "");
  return doc.write();
}

/// \internal
function StandAloneWeightmap.loadDataFromString!(PersistenceContext context, String data) {
  JSONDoc doc();
  Boolean parsed = doc.parse(data);  
  if (!parsed) {
    report("[StandAloneWeightMap] Error loading persistence data. Saved JSON data is not valid");
    return;
  }
  this.persistence_restoreData(doc, "");
}

//
// Canvas persistence
/// \internal
function Boolean StandAloneWeightmap.convertFromString!(String data) {
  this.loadDataFromString(null, data);
  return true;
}

/// \internal
function String StandAloneWeightmap.convertToString!() {
  return this.saveDataToString(null);
}
