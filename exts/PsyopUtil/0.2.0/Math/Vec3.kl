



/// \dfgPresetOmit
inline Color Vec3.toColor?() {
  return Color(this.x, this.y, this.z);
}
/// \dfgPresetOmit
inline Vec3 Color.toVec3?() {
  return Vec3(this.r, this.g, this.b);
}

/// \dfgPresetOmit
function Vec3 Vec3.projectOnto(Vec3 other) {
  // this is A
  // other is B
  if (other.almostEqual( Vec3()) ) {
    return Vec3();
  }
  
  Scalar aDotB = this.dot(other); // A dot B
  Scalar bDotB = other.lengthSquared(); // A dot B
  return other * (aDotB / bDotB);
}

/// \dfgPresetOmit
inline Vec3 Vec3.arbitraryOrthogonal() {
  Vec3 vecX = Vec3(1.0f, 0.0f, 0.0f);
  if (!this.almostEqual(vecX) && !this.almostEqual(-vecX))
    return this.cross(Vec3(1.0f, 0.0f, 0.0f));
  else
    return this.cross(Vec3(0.0f, 1.0f, 1.0f));
}

/// \dfgPresetOmit
inline Boolean Vec3.distanceLessThan(Vec3 other, Scalar dist){
  Vec3 offset = (this - other) / dist;
  return offset.lengthSquared() < 1.0f;
}